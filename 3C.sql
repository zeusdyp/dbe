-- Create STUDENT table
CREATE TABLE STUDENT (
  STUD_ID NUMBER PRIMARY KEY,
  STUD_NAME VARCHAR2(50),
  COURSE VARCHAR2(50)
);

-- Create INSTRUCTOR table
CREATE TABLE INSTRUCTOR (
  INSTRUCTOR_ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(50),
  DEPARTMENT VARCHAR2(50),
  SALARY NUMBER
);

-- Create COURSE_OFFERINGS table with correct foreign key constraint
CREATE TABLE COURSE_OFFERINGS (
  COURSE_NAME VARCHAR2(50),
  INSTRUCTOR_ID NUMBER,
  FOREIGN KEY (INSTRUCTOR_ID) REFERENCES INSTRUCTOR(INSTRUCTOR_ID)
);

-- Insert data into STUDENT table
INSERT INTO STUDENT VALUES (1, 'Arun', 'Comp.Sci');
INSERT INTO STUDENT VALUES (2, 'Meena', 'Math');
INSERT INTO STUDENT VALUES (3, 'Ravi', 'Comp.Sci');
INSERT INTO STUDENT VALUES (4, 'Divya', 'Physics');
INSERT INTO STUDENT VALUES (5, 'Tom', 'Comp.Sci');
INSERT INTO STUDENT VALUES (6, 'Soniya', 'Comp.Sci');
INSERT INTO STUDENT VALUES (7, 'sam', 'Comp.Sci');


-- Insert data into INSTRUCTOR table
INSERT INTO INSTRUCTOR VALUES (1, 'Dr. Rao', 'Comp.Sci', 80000);
INSERT INTO INSTRUCTOR VALUES (2, 'Dr. Smith', 'Math', 70000);
INSERT INTO INSTRUCTOR VALUES (3, 'Dr. Lin', 'Physics', 72000);
INSERT INTO INSTRUCTOR VALUES (4, 'Dr. Raj', 'Chemistry', 65000);
INSERT INTO INSTRUCTOR VALUES (5, 'Dr. Zoe', 'Biology', 77000);

-- Insert data into COURSE_OFFERINGS table
INSERT INTO COURSE_OFFERINGS VALUES ('Comp.Sci', 1);
INSERT INTO COURSE_OFFERINGS VALUES ('Math', 2);
INSERT INTO COURSE_OFFERINGS VALUES ('Physics', 3);
INSERT INTO COURSE_OFFERINGS VALUES ('Chemistry', 4);
INSERT INTO COURSE_OFFERINGS VALUES ('Biology', 5);

-- Answer 1: Get distinct student names where course is 'Comp.Sci'
SELECT DISTINCT STUD_NAME 
FROM STUDENT 
WHERE COURSE = 'Comp.Sci';

-- Answer 2: Get the names of instructors for each course offered
SELECT CO.COURSE_NAME, I.NAME AS INSTRUCTOR_NAME
FROM COURSE_OFFERINGS CO
JOIN INSTRUCTOR I ON CO.INSTRUCTOR_ID = I.INSTRUCTOR_ID
ORDER BY CO.COURSE_NAME;

-- Answer 3: Get department and the highest salary within each department
SELECT DEPARTMENT, MAX(SALARY) 
FROM INSTRUCTOR 
GROUP BY DEPARTMENT;

-- Answer 4: Get the minimum of the maximum salaries across departments
SELECT MIN(MAX_SALARY) 
FROM (
  SELECT MAX(SALARY) AS MAX_SALARY 
  FROM INSTRUCTOR 
  GROUP BY DEPARTMENT
);

-- Answer 5: Get student names starting with 'S' (case-insensitive)
SELECT STUD_NAME 
FROM STUDENT 
WHERE LOWER(STUD_NAME) LIKE 's%';
